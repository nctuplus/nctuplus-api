require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe PastExamsController, type: :controller do
  # This should return the minimal set of attributes required to create a valid
  # PastExam. As you add validations to PastExam, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    FactoryBot.attributes_for :past_exam_for_rspec_test
  end

  let(:current_user) do
    FactoryBot.create :user
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # PastExamsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe 'GET #index' do
    it 'returns a success response' do
      PastExam.create! valid_attributes
      get :index, params: {}, session: valid_session
      expect(response).to be_successful
    end
  end

  describe 'POST #create' do
    before(:each) do
      request.headers.merge! current_user.create_new_auth_token
    end

    context 'with valid params' do
      it 'creates a new PastExam' do
        expect do
          post :create, params: { past_exam: valid_attributes }, session: valid_session
        end.to change(PastExam, :count).by(1)
      end

      it 'renders a JSON response with the new past_exam' do
        post :create, params: { past_exam: valid_attributes }, session: valid_session
        expect(response).to have_http_status(:created)
        expect(response.content_type).to eq('application/json')
        expect(response.location).to eq(PastExam.last.file_url)
      end
    end
  end

  describe 'PUT #update' do
    before(:each) do
      request.headers.merge! current_user.create_new_auth_token
    end
      let(:new_attributes) {{ description: :abcdefg }}

    context 'with valid params' do

      it 'updates the requested past_exam' do
        past_exam = current_user.past_exams.create! valid_attributes
        put :update, params: { id: past_exam.to_param, past_exam: new_attributes }, session: valid_session
        past_exam.reload
        expect(past_exam.description).to eq('abcdefg')
      end

      it 'renders a JSON response with the past_exam' do
        past_exam = current_user.past_exams.create! valid_attributes
        put :update, params: { id: past_exam.to_param, past_exam: valid_attributes }, session: valid_session
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to eq('application/json')
      end
    end

    context 'with current user is not the past exam creator' do
      it 'does not update the requested past exam' do
        past_exam = current_user.past_exams.create! valid_attributes
        past_exam.update(uploader: FactoryBot.create(:user))
        put :update, params: { id: past_exam.to_param, past_exam:  new_attributes }
        past_exam.reload
        expect(past_exam.description).not_to eq('abcdefg')
      end

      it 'renders JSON response with 404 unauthorized status code' do
        past_exam = current_user.past_exams.create! valid_attributes
        past_exam.update(uploader: FactoryBot.create(:user))
        put :update, params: { id: past_exam.to_param, past_exam: new_attributes }
        expect(response).to have_http_status(:unauthorized)
        expect(response.content_type).to eq('application/json')
      end
    end
  end

  describe 'DELETE #destroy' do
    before(:each) do
      request.headers.merge! current_user.create_new_auth_token
    end

    it 'destroys the requested past_exam' do
      past_exam = current_user.past_exams.create! valid_attributes
      expect do
        delete :destroy, params: { id: past_exam.to_param }, session: valid_session
      end.to change(PastExam, :count).by(-1)
    end

    it 'does not delete the requestes past_exam' do
      past_exam = current_user.past_exams.create! valid_attributes
      past_exam.update(uploader: FactoryBot.create(:user))
      expect do
        delete :destroy, params: { id: past_exam.to_param }
      end.to change(PastExam, :count).by(0)
    end
  end
end
